#pragma checksum "G:\document\fog_win\Fog\Fog\Pages\Settings\SettingGit.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "84A85A6F4F6CEC2EAE3A6BFF0EE7B326BFD56C65407247509DB4CE4B1965F775"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fog.Pages.Settings
{
    partial class SettingGit : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(global::Microsoft.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SettingGit_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ISettingGit_Bindings
        {
            private global::Fog.Pages.Settings.SettingGit dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj6;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6IsEnabledDisabled = false;

            private SettingGit_obj1_BindingsTracking bindingsTracking;

            public SettingGit_obj1_Bindings()
            {
                this.bindingsTracking = new SettingGit_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 40 && columnNumber == 168)
                {
                    isobj6IsEnabledDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Pages\Settings\SettingGit.xaml line 40
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISettingGit_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Fog.Pages.Settings.SettingGit>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Fog.Pages.Settings.SettingGit obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AutoFetch_Switch(obj.AutoFetch_Switch, phase);
                    }
                }
            }
            private void Update_AutoFetch_Switch(global::Microsoft.UI.Xaml.Controls.ToggleSwitch obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_AutoFetch_Switch(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AutoFetch_Switch_IsOn(obj.IsOn, phase);
                    }
                }
            }
            private void Update_AutoFetch_Switch_IsOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\Settings\SettingGit.xaml line 40
                    if (!isobj6IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SettingGit_obj1_BindingsTracking
            {
                private global::System.WeakReference<SettingGit_obj1_Bindings> weakRefToBindingObj; 

                public SettingGit_obj1_BindingsTracking(SettingGit_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SettingGit_obj1_Bindings>(obj);
                }

                public SettingGit_obj1_Bindings TryGetBindingObject()
                {
                    SettingGit_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_AutoFetch_Switch(null);
                }

                public void DependencyPropertyChanged_AutoFetch_Switch_IsOn(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SettingGit_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ToggleSwitch obj = sender as global::Microsoft.UI.Xaml.Controls.ToggleSwitch;
                        if (obj != null)
                        {
                            bindings.Update_AutoFetch_Switch_IsOn(obj.IsOn, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ToggleSwitch cache_AutoFetch_Switch = null;
                private long tokenDPC_AutoFetch_Switch_IsOn = 0;
                public void UpdateChildListeners_AutoFetch_Switch(global::Microsoft.UI.Xaml.Controls.ToggleSwitch obj)
                {
                    if (obj != cache_AutoFetch_Switch)
                    {
                        if (cache_AutoFetch_Switch != null)
                        {
                            cache_AutoFetch_Switch.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, tokenDPC_AutoFetch_Switch_IsOn);
                            cache_AutoFetch_Switch = null;
                        }
                        if (obj != null)
                        {
                            cache_AutoFetch_Switch = obj;
                            tokenDPC_AutoFetch_Switch_IsOn = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, DependencyPropertyChanged_AutoFetch_Switch_IsOn);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Pages\Settings\SettingGit.xaml line 76
                {
                    this.ResetCommitTemplate_btn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ResetCommitTemplate_btn).Click += this.ResetCommitTemplate_btn_Click;
                }
                break;
            case 3: // Pages\Settings\SettingGit.xaml line 73
                {
                    this.CommitTemplate_RTF = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RichEditBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RichEditBox)this.CommitTemplate_RTF).TextChanged += this.RichEditBox_TextChanged;
                }
                break;
            case 4: // Pages\Settings\SettingGit.xaml line 74
                {
                    this.CommitTemplateCharCount_TB = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 5: // Pages\Settings\SettingGit.xaml line 60
                {
                    this.NumberOfCommits_CB = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.NumberOfCommits_CB).SelectionChanged += this.NumberOfCommits_CB_SelectionChanged;
                }
                break;
            case 6: // Pages\Settings\SettingGit.xaml line 40
                {
                    this.AutoFetchTimeInterval_CB = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.AutoFetchTimeInterval_CB).SelectionChanged += this.AutoFetchTimeInterval_CB_SelectionChanged;
                }
                break;
            case 7: // Pages\Settings\SettingGit.xaml line 36
                {
                    this.AutoFetch_Switch = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)this.AutoFetch_Switch).Toggled += this.AutoFetch_Switch_Toggled;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Pages\Settings\SettingGit.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    SettingGit_obj1_Bindings bindings = new SettingGit_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

